* Clojure-102

** 開始之前
*** 安裝 Leiningen
**** 如何安裝
1. Download the [[https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein][lein script]] (or on Windows [[https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein.bat][lein.bat]])
2. Place it on your $PATH where your shell can find it (eg. ~/bin)
3. Set it to be executable (chmod a+x ~/bin/lein)
4. Run it (lein) and it will download the self-install package

You can check your [[https://github.com/technomancy/leiningen/wiki/Packaging][package manager]] as well, but be sure you get version 2.x. 
There's also an [[http://leiningen-win-installer.djpowell.net/][installer for Windows users]].

**** 檢查安裝
#+NAME: lein repl
#+BEGIN_SRC
⋊> ~ lein version                                                  
Leiningen 2.6.0 on Java 1.8.0_25 Java HotSpot(TM) 64-Bit Server VM
⋊> ~ lein repl
nREPL server started on port 55836 on host 127.0.0.1 - nrepl://127.0.0.1:55836
REPL-y 0.3.7, nREPL 0.2.12
Clojure 1.8.0
Java HotSpot(TM) 64-Bit Server VM 1.8.0_25-b17
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=> (println "hello, world!")
hello, world!
nil
user=> (+ 1 2)
3
user=> (defn add
  #_=>   [a b]
  #_=>   (+ a b))
#'user/add
user=> (add 1 2)
3
user=> (do (println "hello~")
  #_=>     (println "world!"))
hello~
world!
nil
user=> exit
Bye for now!
#+END_SRC

** 原生數據
*** 字串
**** 使用範例
#+NAME:
#+BEGIN_SRC
user=> (require '[clojure.string :as str])
nil
user=> (str/blank? "")
true
#+END_SRC

**** 改變字串大小寫

#+NAME:
#+BEGIN_SRC
;; 改變字串的第一個字符
user=> (clojure.string/capitalize "hi! i am walter")
"Hi! i am walter"

;; 改變字串的所有大寫
user=> (clojure.string/upper-case "become upper case")
"BECOME UPPER CASE"

;; 改變字串的所有小寫
user=> (clojure.string/lower-case "BECOME LOWER CASE")
"become lower case"

#+END_SRC

**** 清除字串的空白字符
#+NAME:
#+BEGIN_SRC
;; 刪除首尾的所有空白字符
user=> (clojure.string/trim " Hello, trim space ")
"Hello, trim space"
#+END_SRC

**** 建立字串
#+NAME:
#+BEGIN_SRC
;; 利用 str 建立字串
user=> (str "hi" ", " "I " "am " "Walter")
"hi, I am Walter"

;; 利用 apply 建立字串
user=> (apply str ["hi" ", " "I " "am " "Walter"])
"hi, I am Walter"

;; join
user=> (clojure.string/join '[a b c d])
"abcd"
#+END_SRC

**** 將字串做為字符序列
#+NAME:
#+BEGIN_SRC
;; 字用 seq
user=> (seq "hello, world!")
(\h \e \l \l \o \, \space \w \o \r \l \d \!)

;; 計算每個字符在字串中出現的次數
user=> (frequencies (str "This " "is " "an " "apple"))
{\space 3, \a 2, \e 1, \h 1, \i 2, \l 1, \n 1, \p 2, \s 2, \T 1}

;; 判斷字串中的每個字符是否都是大寫
user=> (defn is-upper? [s]
  #_=>   (every? #(or (not (Character/isLetter %))
  #_=>                (Character/isUpperCase %))
  #_=>         s))
#'user/is-upper?
user=> (is-upper? "ALL UPPER")
true
user=> (is-upper? "all upper")
false
#+END_SRC

**** 字符與數值轉換
#+NAME:
#+BEGIN_SRC
;; 用 int 將字符轉成整數值
user=> (int \a)
97
user=> (int \0)
48
user=> (map int "hello, world!")
(104 101 108 108 111 44 32 119 111 114 108 100 33)

;; 用 char 函數返回整數編碼值對應的字符
user=> (int \a)
97
user=> (int \0)
48
user=> (map int "hello, world!")
(104 101 108 108 111 44 32 119 111 114 108 100 33)
user=> (char 97)
\a
user=> (char 48)
\0
user=> (reduce #(str %1 (char %2))
  #_=>         ""
  #_=>         [72 101 108 108 111])
"Hello"
#+END_SRC

**** 格式化字串
#+NAME:
#+BEGIN_SRC
;; 使用 str
user=> (def my-name "walter")
#'user/my-name
user=> (str "My name is " my-name)
"My name is walter"
user=> (str "My age is " (+ 8 9))
"My age is 17"

;; 使用 format
user=> (format "My age is %02d" (+ 8 9))
"My age is 17"
#+END_SRC

**** 找尋字串
#+NAME:
#+BEGIN_SRC
;; 所有連續的數字
user=> (re-find #"\d+" "I am walter, i am 17 years old.")
"17"

;; 連續的單詞字符
user=> (re-find #"\w+" "I am walter")
"I"
user=> (re-find #"\w+" "hello-world")
"hello"
user=> (re-matches #"\w+" "I am walter")
nil
user=> (re-matches #"\w+" "IAmWalter")
"IAmWalter"
#+END_SRC

**** 正規表示法取值
#+NAME:
#+BEGIN_SRC
user=> (re-seq #"\w+" "I am walter")
("I" "am" "walter")
user=> (re-seq #"\w+\s" "I am walter")
("I " "am ")
user=> (re-seq #"\d{2}-\d{8}" "My phone number is 02-12345678")
("02-12345678")
user=> (re-find #"(\d{2})-(\d{8})" "My phone number is 02-12345678")
["02-12345678" "02" "12345678"]
#+END_SRC

**** 對字串查找和替換
#+NAME:
#+BEGIN_SRC
user=> (clojure.string/replace "I am 20 years old" "20" "18")
"I am 18 years old"
user=> (clojure.string/replace "I am 17 years old, not 18." #"(\d+)" "xx")
"I am xx years old, not xx."
#+END_SRC

**** 將字串切成部份
#+NAME:
#+BEGIN_SRC
user=> (clojure.string/split "I,am,walter" #",")
["I" "am" "walter"]
user=> (clojure.string/split "I am walter" #"\s+")
["I" "am" "walter"]

;; 設置 limit
user=> (clojure.string/split "I am walter" #"\s+" 1)
["I am walter"]
user=> (clojure.string/split "I am walter" #"\s+" 2)
["I" "am walter"]
user=> (clojure.string/split "I am walter" #"\s+" 100)
#+END_SRC

**** 在字串，符號和關鍵字間轉換
#+NAME:
#+BEGIN_SRC
;; 字串轉符號
user=> (symbol "vaild?")
vaild?

;; 符號轉字串
user=> (str 'vaild?)
"vaild?"

;; 關鍵字轉字串
user=> (name :wonderful)
"wonderful"

;; 關鍵字轉字串包含冒號
user=> (str :wonderful)
":wonderful"

;; 符號或字串轉成關鍵字
user=> (keyword "wonderful")
:wonderful
user=> (keyword 'wonderful)
:wonderful

;; 關鍵字轉成符號
user=> (symbol (name :wonderful))
wonderful

;; 取得關鍵字名字部份
user=> (name :user/vaild?)
"vaild?"

;; 取得命名空間
user=> (namespace :user/vaild?)
"user"
#+END_SRC

*** 數值
**** 利用非常大或非常小的數來保持精度
#+NAME:
#+BEGIN_SRC
;; 亞佛加厥常數
user=> 6.0221413e23
6.0221413E23

user=> 1e-10
1.0E-10

;; 超過 long 的邊界，溢位錯誤
user=> (* 9999 9999 9999 9999 9999)

ArithmeticException integer overflow  clojure.lang.Numbers.throwIntOverflow (Numbers.java:1501)

;; 使用引號提升到 Big 類型
user=> (*' 9999 9999 9999 9999 9999)
99950009999000049999N
#+END_SRC

**** 使用有理數
#+NAME:
#+BEGIN_SRC
user=> (/ 1 4)
1/4
user=> (type (/ 1 4))
clojure.lang.Ratio
user=> (* 2 (/ 1 2))
1N

;; double 類型
user=> (+ (/ 1 5) 0.7)
0.8999999999999999

;; 使用 rationalize 轉換成有理數，以免失去精度
user=> (rationalize 0.7)
7/10
user=> (+ (/ 1 5) (rationalize 0.7))
9/10
#+END_SRC

**** 解析數字
#+NAME:
#+BEGIN_SRC
;; 使用 Integer/parseInt
user=> (Integer/parseInt "33")
33

;; 使用 Double/parseDouble
user=> (Double/parseDouble "3.14159")
3.14159

;; 高精度 使用 BigInteger
user=> (bigint "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890")
1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890N

;; 高精度 使用 BigDecimal
user=> (bigdec "3.141592653589793238462643383279502884197")
3.141592653589793238462643383279502884197M
#+END_SRC

**** 數字的載斷和捨入
#+NAME:
#+BEGIN_SRC
;; 強制轉成 int
user=> (int 3.14)
3
user=> (int 1.9988776655)
1

;; 取四拾五入
user=> (Math/round 3.14)
3
user=> (Math/round 1.9988776655)
2

;; 取得大於指定數的最小整數值
user=> (Math/ceil 1.9988776655)
2.0

;; 取得小於指定數的最大整數值
user=> (Math/floor 3.14)
3.0
#+END_SRC

**** 三角函數
#+NAME:
#+BEGIN_SRC
;; 計算 sin(a + b)
;; sin(a + b) = sin a * cos b + sin b * cos a
user=> (defn sin-plus [a b]
  #_=>   (+ (* (Math/sin a) (Math/cos b))
  #_=>      (* (Math/sin b) (Math/cos a))))
#'user/sin-plus
user=> (sin-plus 0.1 0.3)
0.38941834230865047
#+END_SRC

**** 根據不同的進制輸入與輸出整數
#+NAME:
#+BEGIN_SRC
user=> 2r00111100
60
user=> 2r11111111
255
user=> 16r0A
10
user=> 16r10
16

;; 輸出整數
user=> (Integer/toString 10 2)
"1010"
user=> (Integer/toString 10 16)
"a"
#+END_SRC

**** 計算數值集合的統計值
#+NAME:
#+BEGIN_SRC
#'user/main
user=> (defn mean [coll]
  #_=>   (let [sum (apply + coll)
  #_=>         count (count coll)]
  #_=>     (if (pos? count)
  #_=>       (/ sum count)
  #_=>       0)))
#'user/mean
user=> (mean [1 2 3 4])
5/2
user=> (mean [1 2 3])
2
user=> (mean [1.1 2.2 3.3 4.4])
2.75
#+END_SRC

**** 找出數值的中位數
#+NAME:
#+BEGIN_SRC
user=> (defn median [coll]
  #_=>   (let [sorted (sort coll)
  #_=>         cnt (count sorted)
  #_=>         halfway (int (/ cnt 2))]
  #_=>     (if (odd? cnt)
  #_=>       (nth sorted halfway)
  #_=>       (let [bottom (dec halfway)
  #_=>             bottom-val (nth sorted bottom)
  #_=>             top-val (nth sorted halfway)]
  #_=>         (mean [bottom-val top-val])))))
#'user/median
user=> (median [1 3 4 2 5])
3
user=> (median [2 0 1 4])
3/2
#+END_SRC

**** 找出集合中最常出現的值
#+NAME:
#+BEGIN_SRC
user=> (defn mode [coll]
  #_=>   (let [freqs (frequencies coll)
  #_=>         occurrences (group-by second freqs)
  #_=>         modes (last (sort occurrences))
  #_=>         modes (->> modes
  #_=>                    second
  #_=>                    (map first))]
  #_=>     modes))
#'user/mode
user=> (mode [:walter :qq :walter :gg])
(:walter)
user=> (mode [:walter :qq :walter :gg :qq])
(:walter :qq)
#+END_SRC

**** 生成隨機數
#+NAME:
#+BEGIN_SRC
user=> (rand)
0.2824352415380432
user=> (rand)
0.8155379471470274

;; 生成隨機整數
user=> (inc (rand-int 6))
6
user=> (inc (rand-int 6))
1
user=> (inc (rand-int 6))
5

;; 從序列集合取得隨機元素
user=> (rand-nth [1 2 3])
3
user=> (rand-nth [1 2 3])
1
user=> (rand-nth '(:a :b :c))
:c
user=> (rand-nth '(:a :b :c))
:b

;; 對 set 或 hashmap 取得隨機元素
;; 如果單純使用的話，無法對 set 或 hashmap 起作用，請先使用 seq 將其轉成序列
user=> (rand-nth (seq #{:walter :qq :gg :hello}))
:walter
user=> (rand-nth (seq #{:walter :qq :gg :hello}))
:gg

;; 隨機排列一個集合
user=> (shuffle [1 2 3 4 5 6 7 8 9 0])
[3 4 9 7 6 0 2 5 1 8]
user=> (shuffle [1 2 3 4 5 6 7 8 9 0])
[4 2 7 1 8 9 0 5 6 3]
#+END_SRC

**** 生成唯一ID
#+NAME:
#+BEGIN_SRC
user=> (java.util.UUID/randomUUID)
#uuid "cdeaf476-17d8-48e6-b8b3-841de13c9834"
user=> (java.util.UUID/randomUUID)
#uuid "0b66be93-e853-4f63-95e0-c3be5f9e9066"
#+END_SRC

*** 日期
**** 得到當前日期與時間
#+NAME:
#+BEGIN_SRC
user=> (java.util.Date.)
#inst "2016-06-08T14:14:39.039-00:00"
user=> (java.util.Date.)
#inst "2016-06-08T14:14:43.539-00:00"

;; unix time
user=> (System/currentTimeMillis)
1465395385407
user=> (System/currentTimeMillis)
1465395387258
#+END_SRC

**** 用字面值來表示日期
#+NAME:
#+BEGIN_SRC
user=> (def walter-birthday #inst "1990-02-17T03:00:00.000-00:00")
#'user/walter-birthday
user=> (println walter-birthday)
#inst "1990-02-17T03:00:00.000-00:00"
nil
#+END_SRC

**** 利用 clj-time 解析日期和時間
#+NAME:
#+BEGIN_SRC
;; 先在依賴中加入 clj-time "0.6.0"
;; 解析 MM/dd/yy 這樣的日期
user=> (require '[clj-time.format :as tf])
nil
user=> (def government-forms-date (tf/formatter "MM/dd/yy"))
#'user/government-forms-date
user=> (tf/parse government-forms-date "06/08/16")
#object[org.joda.time.DateTime 0x65399f04 "2016-06-08T00:00:00.000Z"]
user=> (tf/parse wonky-format "10:34:25 on 2016-06-08")
#object[org.joda.time.DateTime 0x4c2cb482 "2016-06-08T10:34:25.000Z"]
#+END_SRC

**** 利用 clj-time 格式化日期
#+NAME:
#+BEGIN_SRC
user=> (require '[clj-time.format :as tf])
nil
user=> (require '[clj-time.core :as t])
nil
user=> (tf/unparse (tf/formatters :date) (t/now))
"2016-06-08"
user=> (def my-format (tf/formatter "MMM d, yyyy 'at' hh:mm"))
#'user/my-format
user=> (tf/unparse my-format (t/now))
"六月 8, 2016 at 02:41"
#+END_SRC

**** 比較日期
#+NAME:
#+BEGIN_SRC
user=> (defn now [] (java.util.Date.))
#'user/now
user=> (def one-second-ago (now))
#'user/one-second-ago
user=> (Thread/sleep 1000)
nil
;; 現在比一秒前大 (1)
user=> (compare (now) one-second-ago)
1
;; 一秒前比現在小 (1)
user=> (compare one-second-ago (now))
-1
;; 相等用 0 表示
user=> (compare one-second-ago one-second-ago)
0
#+END_SRC

**** 計算時間間隔的長度
#+NAME:
#+BEGIN_SRC
user=> (require '[clj-time.core :as t])
nil

;; 計算 6月1日 到今天之間的間隔
user=> (def since-jun-first (t/interval (t/date-time 2016 06 01) (t/now)))
#'user/since-jun-first

user=> since-jun-first
#object[org.joda.time.Interval 0x7aa4807 "2016-06-01T00:00:00.000Z/2016-06-08T14:54:57.971Z"]

;; 計算天數
user=> (t/in-days since-jun-first)
7

;; 計算登月以來的年數
user=> (t/in-years (t/interval (t/date-time 1969 07 20) (t/now)))
46

;; 計算 2016-06-01 到 2016-06-07 之間的天數
user=> (t/in-days (t/interval (t/date-time 2016 06 01)
  #_=>                        (t/date-time 2016 06 07)))
6
#+END_SRC

**** 生成一系列的時間
#+NAME:
#+BEGIN_SRC
user=> (require '[clj-time.core :as time])
nil
user=> (require '[clj-time.periodic :as time-period])
nil
user=> (defn time-range
  #_=>   "Return a lazy sequence of DateTimes from start to end, incremented
  #_=>    by 'step' units of time."
  #_=>   [start end step]
  #_=>   (let [inf-range (time-period/periodic-seq start step)
  #_=>         below-end? (fn [t] (time/within? (time/interval start end) t))]
  #_=>     (take-while below-end? inf-range)))
#'user/time-range
user=> (def months-of-the-year (time-range (time/date-time 2015 01)
  #_=>                                     (time/date-time 2016 01)
  #_=>                                     (time/months 1)))
#'user/months-of-the-year
user=> (realized? months-of-the-year)
false
user=> (count months-of-the-year)
12
user=> (realized? months-of-the-year)
true
#+END_SRC

**** 根據日期間的關係取得日期
#+NAME:
#+BEGIN_SRC
;; 1.day.from_now
user=> (require '[clj-time.core :as t])
nil
user=> (-> 1
  #_=>   t/days
  #_=>   t/from-now)
#object[org.joda.time.DateTime 0x63e58a8b "2016-06-09T15:31:36.906Z"]

;; 3.days.ago
user=> (-> 3
  #_=>   t/days
  #_=>   t/ago)
#object[org.joda.time.DateTime 0x4f8e4f18 "2016-06-05T15:33:20.671Z"]

;; 1.years.from_now
user=> (t/plus (t/now) (t/years 1))
#object[org.joda.time.DateTime 0x1a628949 "2017-06-08T15:34:37.202Z"]

;; some_date - 3.years
user=> (def some-date (t/date-time 2016 04 01))
#'user/some-date
user=> (t/minus some-date (t/years 3))
#object[org.joda.time.DateTime 0x4b3315c7 "2013-04-01T00:00:00.000Z"]
#+END_SRC

**** 處理時區
#+NAME:
#+BEGIN_SRC
;; 我的生日，在正確的時區
user=> (require '[clj-time.core :as t])
nil
user=> (def my-date (t/from-time-zone (t/date-time 1990 02 17 03)
  #_=>                                (t/time-zone-for-offset +8)))
#'user/my-date
user=> my-date
#object[org.joda.time.DateTime 0x240d0e57 "1990-02-17T03:00:00.000+08:00"]

;; 我出生時 Asia/Taipei 是什麼時間
user=> (def taiwan-my-date
  #_=>   (t/to-time-zone my-date (t/time-zone-for-id "Asia/Taipei")))
#'user/taiwan-my-date
user=> taiwan-my-date
#object[org.joda.time.DateTime 0x24bf6f "1990-02-17T03:00:00.000+08:00"]
user=> (compare taiwan-my-date my-date)
0
#+END_SRC

**** 將 Unix time 轉換成 Date 對象
#+NAME:
#+BEGIN_SRC
user=> (defn from-unix-time
  #_=>   "Return a Java Date object from a Unix time representation expressed in whole seconds."
  #_=>   [unix-time]
  #_=>   (java.util.Date. unix-time))
#'user/from-unix-time
user=> (from-unix-time 1465395387258)
#inst "2016-06-08T14:16:27.258-00:00"

;; use clj-time
user=> (require '[clj-time.coerce :as timec])
nil
user=> (defn datetime-from-unix-time
  #_=>   "Return a DateTime object from a Unix time representation expressed in whole seconds."
  #_=>   [unix-time]
  #_=>   (timec/from-long unix-time))
#'user/datetime-from-unix-time
user=> (datetime-from-unix-time 1465395387258)
#object[org.joda.time.DateTime 0x3aa4be4c "2016-06-08T14:16:27.258Z"]
#+END_SRC

**** 將 Date 對象轉換成 Unix time
#+NAME:
#+BEGIN_SRC
user=> (defn to-unix-time
  #_=>   "Returns a Unix time representation expressed in whole seconds given a java.util.Date."
  #_=>   [date]
  #_=>   (.getTime date))
#'user/to-unix-time
user=> (def date (read-string "#inst \"2016-06-08T10:00:00.000-00:00\""))
#'user/date
user=> (to-unix-time date)
1465380000000

;; use clj-time
user=> (require '[clj-time.coerce :as timec])
nil
user=> (defn datetime-to-unix-time
  #_=>   "Returns a Unix time representation expressed in whole seconds given a DateTime."
  #_=>   [datetime]
  #_=>   (timec/to-long datetime))
#'user/datetime-to-unix-time
user=> (def datetime (clj-time.core/date-time 2016 06 8 10 00))
#'user/datetime
user=> (datetime-to-unix-time datetime)
1465380000000
#+END_SRC

** 複合數據

*** 創建列表
#+NAME:
#+BEGIN_SRC
user=> '(:a \b "c")
(:a \b "c")
user=> (list :a \b "c")
(:a \b "c")

;; 小提醒
user=> (def a-num 2)
#'user/a-num
user=> '(a-num 3 4)
(a-num 3 4)
user=> (list a-num 3 4)
(2 3 4)

#+END_SRC

*** 從已有的數據結構創建列表
#+NAME:
#+BEGIN_SRC

user=> (apply list [1 2 3 4 5])
(1 2 3 4 5)

;; 小提醒
;; 注意它的副作用，會顛倒原來的集合順序，但快在速度
user=> (into '() [1 2 3 4 5])
(5 4 3 2 1)

#+END_SRC

*** 在列表中加一個元素
#+NAME:
#+BEGIN_SRC
user=> (conj '(1 2 3) 4)
(4 1 2 3)
user=> (conj (list 1 2 3) 4)
(4 1 2 3)
#+END_SRC

*** 從列表中移除一個元素
#+NAME:
#+BEGIN_SRC
user=> (pop '(1 2 3))
(2 3)
user=> (rest '(1 2 3))
(2 3)
; but
user=> (pop '())

IllegalStateException Can't pop empty list  clojure.lang.PersistentList$EmptyList.pop (PersistentList.java:209)

user=> (rest '())
()
#+END_SRC

*** 測試是否為列表
#+NAME:
#+BEGIN_SRC
user=> (list? '(1 2 3))
true
user=> (list? (list 1 2 3))
true
user=> (list? (range 3))
false
user=> (type (range 3))
clojure.lang.LongRange
#+END_SRC

*** 創建向量
#+NAME:
#+BEGIN_SRC
user=> [1 2 3]
[1 2 3]
user=> (vector 1 2 3)
[1 2 3]
#+END_SRC

*** 從已有的數據結構創建向量
#+NAME:
#+BEGIN_SRC
user=> (vec '(1 2 3))
[1 2 3]
user=> (vec #{1 2 3})
[1 3 2]
user=> (into [] '(1 2 3))
[1 2 3]
#+END_SRC

*** 在向量中加一個元素
#+NAME:
#+BEGIN_SRC
user=> (conj [1 2 3] 4)
[1 2 3 4]

;; 但容易出錯，會有 IndexOutOfBoindsException
user=> (assoc [1 2 3] 3 4)
[1 2 3 4]
#+END_SRC

*** 從向量中移除一個元素
#+NAME:
#+BEGIN_SRC
user=> (pop [1 2 3])
[1 2]
user=> (subvec [1 2 3] 1)
[2 3]
user=> (subvec [1 2 3 4 5] 1 3)
[2 3]
#+END_SRC

*** 取得索引處的值
#+NAME:
#+BEGIN_SRC
;; 使用 nth
user=> (nth [1 2 3 4] 2)
3
user=> (nth [1 2 3 4] 4)

IndexOutOfBoundsException   clojure.lang.PersistentVector.arrayFor (PersistentVector.java:158)
user=> (nth [1 2 3 4] 4 :not-found)
:not-found

;; 將向量作為其索引的函數
user=> (def v [1 2 3])
#'user/v
user=> (v 2)
3

;; 使用 get
user=> (get [1 2 3 4] 2)
3
user=> (get [1 2 3 4] 4)
nil
user=> (get [1 2 3 4] 4 :not-found)
:not-found
#+END_SRC

*** 設罝索引處的值
#+NAME:
#+BEGIN_SRC
user=> (assoc [1 2 3 4] 2 5)
[1 2 5 4]
user=> (assoc {:a 1 :b 2 :c 3 :d 4} :c 9)
{:a 1, :b 2, :c 9, :d 4}
user=> (assoc {:a 1 :b 2 :c 3 :d 4} :a 0 :c 9)
{:a 0, :b 2, :c 9, :d 4}
#+END_SRC

*** 創建集合
#+NAME:
#+BEGIN_SRC
user=> #{1 2 3}
#{1 3 2}

;; 重覆值
user=> #{1 2 3 3}

IllegalArgumentException Duplicate key: 3  clojure.lang.PersistentHashSet.createWithCheck (PersistentHashSet.java:68)

;; 使用 hash-set
user=> (hash-set 1 2 3)
#{1 3 2}
user=> (apply hash-set [1 2 3])
#{1 3 2}

;; 使用 set
user=> (set "hello")
#{\e \h \l \o}

;; 利用 into
user=> (into #{1 2} [3 4])
#{1 4 3 2}

;; 用 sorted-set
user=> (sorted-set 4 3 2 1)
#{1 2 3 4}
#+END_SRC

*** 在集合中增加或移除元素
#+NAME:
#+BEGIN_SRC
;; 增加
user=> (conj #{1 2 3} 4)
#{1 4 3 2}
user=> (conj #{1 2 3} 4 5)
#{1 4 3 2 5}

;; 移除
user=> (disj #{1 2 3 4 5} 3)
#{1 4 2 5}
user=> (disj #{1 2 3 4 5} 3 5)
#{1 4 2}
#+END_SRC

*** 測試集成員
#+NAME:
#+BEGIN_SRC
;; 用 contains? 檢查
user=> (contains? #{1 2 3 4} 3)
true
user=> (contains? #{1 2 3 4} 5)
false
#+END_SRC

*** 使用集操作
#+NAME:
#+BEGIN_SRC
;; union
user=> (clojure.set/union #{1 2 3} #{2 3} #{3})
#{1 3 2}
user=> (clojure.set/union #{:1 :2 :3} #{:2 :3} #{:3})
#{:1 :2 :3}

;; intersection
user=> (clojure.set/intersection #{:1 :2 :3} #{:2 :3} #{:3})
#{:3}
user=> (clojure.set/intersection #{1 2 3} #{2 3} #{3})
#{3}

;; difference
user=> (clojure.set/difference #{1 2 3 4} #{2 3 5} #{3 6})
#{1 4}
user=> (clojure.set/difference #{:1 :2 :3 :4} #{:2 :3 :5} #{:3 :6})
#{:4 :1}

;; subset?
;; Is set1 a superset of set2?
ser=> (clojure.set/subset? #{3 4} #{1 2 3 4})
true
user=> (clojure.set/subset? #{:3 :5} #{:1 :2 :3 :4})
false

;; superset?
;; Is set1 a superset of set2?
user=> (clojure.set/superset? #{3 4} #{1 2 3 4})
false
user=> (clojure.set/superset? #{1 2 3 4} #{3 4})
true
#+END_SRC

*** 創建映射表
#+NAME:
#+BEGIN_SRC
user=> {:name "walter" :age 17}
{:name "walter", :age 17}

user=> (array-map :name "walter" :age 17)
{:name "walter", :age 17}

user=> (sorted-map :n1 1 :n2 2)
{:n1 1, :n2 2}

;; sorted-map-by
user=> (sorted-map-by #(< (count %1) (count %2))
  #_=>                "address" "Taipei"
  #_=>                "name" "Walter"
  #_=>                "age" 17)
{"age" 17, "name" "Walter", "address" "Taipei"}
#+END_SRC

*** 從映射表中取得值
#+NAME:
#+BEGIN_SRC
;; use get
user=> (get {:age 17, :name "Walter", :address "Taipei"} :name)
"Walter"
user=> (get {:age 17, :name "Walter", :address "Taipei"} :age)
17
user=> (get {:age 17, :name "Walter", :address "Taipei"} :address)
"Taipei"
user=> (get {:age 17, :name "Walter", :address "Taipei"} :last-name)
nil
user=> (get {:age 17, :name "Walter", :address "Taipei"} :last-name "not-found")
"not-found"

;; 用 keyword 做為函數
user=> (:name {:age 17, :name "Walter", :address "Taipei"})
"Walter"
user=> (:age {:age 17, :name "Walter", :address "Taipei"})
17
user=> (:address {:age 17, :name "Walter", :address "Taipei"})
"Taipei"
user=> (:last-name {:age 17, :name "Walter", :address "Taipei"} "not-found")
"not-found"

;; 用 map 本身做為函數
user=> (def info {:age 17, :name "Walter", :address "Taipei"})
#'user/info
user=> info
{:age 17, :name "Walter", :address "Taipei"}
user=> (info :name)
"Walter"
user=> (info :address)
"Taipei"
user=> (info :age)
17
user=> (info :last-name "not-found")
"not-found"

;; 查找嵌套的 map, 使用 get-in
user=> (def info {:age 17, :name {:first-name "Walter", :last-name "Wang"}, :address "Taipei"})
#'user/info
user=> info
{:age 17, :name {:first-name "Walter", :last-name "Wang"}, :address "Taipei"}
user=> (get-in info [:name :first-name])
"Walter"
user=> (get-in info [:name :last-name])
"Wang"
#+END_SRC

*** 從映射表中取得多個 keyword
#+NAME:
#+BEGIN_SRC
;; 使用 vals 和 select-keys (如果順序不重要)
user=> (def fruit {:apple 2, :orange 4, :banana 1})
#'user/fruit
user=> fruit
{:apple 2, :orange 4, :banana 1}
user=> (reduce + (vals (select-keys fruit [:apple :banana])))
3
user=> (reduce + (vals (select-keys fruit [:banana :orange])))
5

;; 使用 juxt (如果順序重要)
user=> ((juxt :apple :banana) fruit)
[2 1]
user=> ((juxt :banana :orange) fruit)
[1 4]
#+END_SRC

*** 設置映射表中的鍵
#+NAME:
#+BEGIN_SRC
;; assoc
user=> (def info {:age 17, :name {:first-name "Walter", :last-name "Wang"}, :address "Taipei"})
#'user/info
user=> info
{:age 17, :name {:first-name "Walter", :last-name "Wang"}, :address "Taipei"}

user=> (assoc info :address "New Taipei City" :age 18)
{:age 18, :name {:first-name "Walter", :last-name "Wang"}, :address "New Taipei City"}

user=> (assoc info :address "New Taipei City" :age 18 :height 170)
{:age 18, :name {:first-name "Walter", :last-name "Wang"}, :address "New Taipei City", :height 170}

;; dissoc
user=> (dissoc info :address)
{:age 17, :name {:first-name "Walter", :last-name "Wang"}}

;; assoc-in
user=> (assoc-in info [:name :last-name] "Blyess")
{:age 17, :name {:first-name "Walter", :last-name "Blyess"}, :address "Taipei"}

;; update-in
user=> (update-in info [:name :last-name] str "Blyess")
{:age 17, :name {:first-name "Walter", :last-name "WangBlyess"}, :address "Taipei"}

user=> (update-in {} [:name :last-name] str "Blyess")
{:name {:last-name "Blyess"}}
#+END_SRC

*** 用複合值做為映射表的 keyword
#+NAME:
#+BEGIN_SRC
;; 建立棋盤
user=> (def chessboard {[:a 5] [:white :king]
  #_=>                  [:a 4] [:white :pawn]
  #_=>                  [:d 4] [:black :king]})
#'user/chessboard
user=> chessboard
{[:a 5] [:white :king], [:a 4] [:white :pawn], [:d 4] [:black :king]}
user=> (chessboard [:a 5])
[:white :king]

;; 移動棋子的方法，dissoc 舊的位置，assoc 新的位置
user=> (defn move
  #_=>   "Given a map representing a chessboard, move the piece at src to dest"
  #_=>   [board source dest]
  #_=>   (-> board
  #_=>       (dissoc source)
  #_=>       (assoc dest (board source))))
#'user/move

;; 移動
user=> (move chessboard [:a 5] [:a 4])
{[:a 4] [:white :king], [:d 4] [:black :king]}

;; 有一組函數，要能夠指定移動每個函數的 "權重"，
;; 並在函數被調用時，用返回值乘以對應的權重.
;; 一種容易實現的方法是將函數和權重保存在映射表中，以函數作為鍵:

user=> (def plus-two (partial + 2))
#'user/plus-two
user=> (def plus-three (partial + 3))
#'user/plus-three
user=> (def weight-map {plus-two 1.0
  #_=>                  plus-three 0.8})

user=> (defn apply-weighted
  #_=>   "Given a weight map, a function, and args, applies the function
  #_=>    to the args, multiplying the result the by the weighting for the
  #_=>    function. If the weight map does not specify a weight for the
  #_=>    function, a default of 1.0 is used."
  #_=>   [weight-map f & args]
  #_=>   (* (get weight-map f 1.0)
  #_=>      (apply f args)))
#'user/apply-weighted

user=> (apply-weighted weight-map plus-two 2)
4.0
user=> (apply-weighted weight-map plus-three 1)
3.2
#+END_SRC

*** 將映射表作為序列 (或反過來)
#+NAME:
#+BEGIN_SRC
user=> (seq {:a 1, :b 2, :c 3, :d 4})
([:a 1] [:b 2] [:c 3] [:d 4])

;; 要從序列創建映射表，可以利用 conj 函數的一個特點，
;; 即它在應用於映射表時，可以接受2個元素的向量，作為健值時，
;; 將其加到映射表中.
user=> (def my-map {:a 1, :b 2})
#'user/my-map
user=> (conj my-map [:c 3])
{:a 1, :b 2, :c 3}

;; 因為 into 函數反覆應用 conj，將元素從一個序列放到一個集合中，
;; 所以可以用它將鍵值對序列轉換成一個映射表.
user=> (into {} [[:a 1] [:b 2] [:c 3]])
{:a 1, :b 2, :c 3}

;; 從2個序列構造一個映射表，一個包含鍵，一個包含值。
;; 這就是 zipmap 函數的功能.
;; 給定2個序列，鍵來自第一個參數序列，值來自第二個參數序列:
user=> (zipmap [:a :b :c] [1 2 3])
{:a 1, :b 2, :c 3}

;; 排序
user=> (seq (hash-map :a 1 :b 2 :c 3 :d 4))
([:c 3] [:b 2] [:d 4] [:a 1])
user=> (seq (sorted-map :a 1 :b 2 :c 3 :d 4))
([:a 1] [:b 2] [:c 3] [:d 4])

;; MapEntry 提供了 key 和 val 函數，用於取得條目的鍵和值
user=> (def entry (first {:a 1, :b 2}))
#'user/entry
user=> (class entry)
clojure.lang.MapEntry
user=> (key entry)
:a
user=> (val entry)
1
#+END_SRC

*** 對映射表應用函數
#+NAME:
#+BEGIN_SRC
user=> (defn map-keys
  #_=>   "Given a map and a function, return the map resulting from applying
  #_=>    the function to each key."
  #_=>   [m f]
  #_=>   (zipmap (map f (keys m)) (vals m)))

user=> (map-keys {"a" 1 "b" 2} keyword)
{:a 1, :b 2}

user=> (defn map-vals
  #_=>   "Given a map and a function, return the map resulting from applying
  #_=>    the function to each value."
  #_=>   [m f]
  #_=>   (zipmap (keys m) (map f (vals m))))
#'user/map-vals

user=> (map-vals {:a 1, :b 2} inc)
{:a 2, :b 3}

user=> (defn map-kv
  #_=>   "Given a map and a function of two arguments, returns the map
  #_=>    resulting from applying the function to each of its entries.
  #_=>    The provided function must return a pair (a two-element sequence.)"
  #_=>   [m f]
  #_=>   (into {} (map (fn [[k v]] (f k v)) m)))

user=> (map-kv {"a" 1 "b" 2} (fn [k v] [(keyword k) (inc v)]))
{:a 2, :b 3}

user=> (defn map-kv2
  #_=>   [m f]
  #_=>   (into {} (map (fn [entry]
  #_=>                  (f (key entry) (val entry)))
  #_=>                m)))
#'user/map-kv2
user=> (map-kv2 {"a" 1 "b" 2} (fn [k v] [(keyword k) (inc v)]))
{:a 2, :b 3}

;; reduce-kv, clojure 1.4 加上的
;; reduce-kv 接受三個參數，一個函數，一個初始值，一個關聯集合
;; 注意，在函數的聲明中，下底線 (_) 取代了 key，這是 Clojure中的習慣用法，
;; 命名函數體中實際上不會用到的參數。

user=> (reduce-kv (fn [agg _ val]
  #_=>              (+ agg val))
  #_=>            0
  #_=>            {:a 1, :b 2, :c 3})
6

;; 用 reduce-kv 重新定義
user=> (defn map-kv
  #_=>   [m f]
  #_=>   (reduce-kv (fn [agg k v] (conj agg (f k v))) {} m))
#'user/map-kv

user=> (map-kv {:one 1, :two 2, :three 3} #(vector (-> %1 str (subs 1)) (inc %2)))
{"one" 2, "two" 3, "three" 4}
#+END_SRC

*** 合併映射表
#+NAME:
#+BEGIN_SRC
user=> (def a-fruit-counts {:apple 2, :orange 1})
#'user/a-fruit-counts
user=> (def b-fruit-counts {:banana 3})
#'user/b-fruit-counts
user=> (merge a-fruit-counts b-fruit-counts)
{:apple 2, :orange 1, :banana 3}

;; 如果有相同的鍵，將採用後面出現的映射
user=> (def a-fruit-counts {:apple 2, :orange 1})
#'user/a-fruit-counts
user=> (def b-fruit-counts {:apple 4, :banana 3})
#'user/b-fruit-counts
user=> (merge a-fruit-counts b-fruit-counts)
{:apple 4, :orange 1, :banana 3}

;; 如果有相同的鍵，需要明確控制合併的策略，就用 merge-with
;; 用 + 合併，求合
user=> (merge-with + a-fruit-counts b-fruit-counts)
{:apple 6, :orange 1, :banana 3}

#+END_SRC

*** 值的比較和排序
#+NAME:
#+BEGIN_SRC
;; compare
;; 如果第一個參數小於第二個參數，compare 就返回負數，
;; 等於就返回 0，
;; 大於就返回正數
user=> (compare 2 1)
1
user=> (compare 1 2)
-1
user=> (compare 1 1)
0

;; sort
user=> (sort > [2 1 5 3 4])
(5 4 3 2 1)
user=> (sort < [2 1 5 3 4])
(1 2 3 4 5)

user=> (sort #(< (count %1) (count %2)) ["55555" "4444" "333" "22" "1"])
("1" "22" "333" "4444" "55555")
user=> (sort #(> (count %1) (count %2)) ["55555" "4444" "333" "22" "1"])
("55555" "4444" "333" "22" "1")
#+END_SRC

*** 從集合中移除重覆的元素
#+NAME:
#+BEGIN_SRC
;; 用 set 強制將集合轉換成散列值
user=> (set [:a :a :b :b :c])
#{:c :b :a}

;; 如果序列是無限的，或者需要保持順序，就用 distinct 返回一個 lazy-seq
user=> (distinct [:a :a :b :b :c])
(:a :b :c)
#+END_SRC

*** 檢查集合中是否包含幾個值中的一個
#+NAME:
#+BEGIN_SRC
user=> (some #{1 2} (range 1 10))
1
user=> (some #{10} (range 1 10))
nil
user=> (if (some #{1 2} (range 1 10))
  #_=>   :found
  #_=>   :not-found)
:found
#+END_SRC
